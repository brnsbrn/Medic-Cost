# -*- coding: utf-8 -*-
"""Hospital Cost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rs_OUUc75knmVWl9eiSXiXvHh4b_G2lo

# Import Modul dan Dataset

Import Modul
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

"""Mengunduh dataset menggunakan kredensial kaggle"""

!chmod 600 /content/kaggle.json

!KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d mirichoi0218/insurance

"""Ekstrak Zip"""

import zipfile, os
local_zip = '/content/insurance.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/insurance')
zip_ref.close()

"""Membaca Dataset dan cek dataset"""

hospital = pd.read_csv('/content/insurance/insurance.csv')
hospital.head()

hospital.shape

hospital.describe()

hospital.info()

hospital.isnull().sum()

"""Bagi fitur menjadi kategorikal dan numerikal"""

categorical_features = ['sex', 'smoker', 'region']
numerical_features = ['age', 'bmi', 'children', 'charges']

"""# Univariate Analysis

Grafik fitur Sex
"""

feature = categorical_features[0]
count = hospital[feature].value_counts()
percent = 100 * hospital[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel' : count, 'persentase' : percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Grafik fitur Smoker"""

feature = categorical_features[1]
count = hospital[feature].value_counts()
percent = 100 * hospital[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel' : count, 'persentase' : percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Grafik Fitur Region"""

feature = categorical_features[2]
count = hospital[feature].value_counts()
percent = 100 * hospital[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel' : count, 'persentase' : percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""# Multivariate Analysis

Kategorikal Fitur
"""

cat_features = hospital.select_dtypes(include='object').columns.to_list()
for col in cat_features:
  sns.catplot(x=col, y='charges', kind='bar', dodge=False, height=4, aspect=3, data=hospital, palette='Set3')
  plt.title("Rata-rata 'charges' relatif terhadap - {}".format(col))

"""Numerikal Fitur"""

sns.pairplot(hospital, diag_kind='kde')

"""Korelasi Matriks"""

plt.figure(figsize=(10, 8))
corr = hospital.corr().round(2)
sns.heatmap(data=corr, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Korelasi Matriks Fitur Numerikal", size=20)

"""Dari korelasi matriks di atas, target (charges) memiliki korelasi yang rendah terhadap fitur nmerikal

#  Encoding Fitur Kategori
"""

hospital = pd.concat([hospital, pd.get_dummies(hospital['sex'], prefix='sex')], axis=1)
hospital = pd.concat([hospital, pd.get_dummies(hospital['smoker'], prefix='smoker')], axis=1)
hospital = pd.concat([hospital, pd.get_dummies(hospital['region'], prefix='region')], axis=1)

"""Buat korelasi matriks terhadap semua fiturnya"""

plt.figure(figsize=(10, 8))
corr = hospital.corr().round(2)
sns.heatmap(data=corr, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Korelasi Matriks Seluruh Fitur", size=20)

"""Drop kolom yang telah di encoding"""

hospital.drop(['sex', 'smoker', 'region'], axis=1, inplace=True)
hospital.head()

"""Buat dataframe X yang menampung fitur selain fitur target (Charges)"""

X = hospital.drop(['charges'], axis=1)
X

"""Jadikan dataframe X sebagai data test, lalu buang kolom region karena tidak diperlukan"""

x_test = X.drop(['region_northeast', 'region_northwest', 'region_southeast', 'region_southwest'], axis=1)
x_test

"""Pisahkan fitur target (charges) menjadi y"""

y = hospital['charges']

"""Bagi menjadi Data Train dan Data Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=100)

print(f'total # of sample in whole dataset: {len(X)}')
print(f'total # of sample in whole dataset: {len(X_train)}')
print(f'total # of sample in whole dataset: {len(X_test)}')

"""Standarisasi menggunakan StandardScaler"""

numerical_features = ['age', 'bmi', 'children']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])

scaler.fit(X_test[numerical_features])
X_test[numerical_features] = scaler.transform(X_test.loc[:, numerical_features])

X_train[numerical_features].describe().round(4)

"""Buat dataframe untuk menampung nilai MSE"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RF'])

"""Membuat model KNN"""

knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""Membuat Model Random Forest"""

RF = RandomForestRegressor(n_estimators=100, max_depth=16, random_state=100, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RF'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""Tabel untuk menampung nilai MSE dari data train dan data test"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF'])
model_dict = {'KNN': knn, 'RF': RF}

"""Menghitung nilai MSE"""

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Menghitung nilai R2 Score"""

forest_test_pred = RF.predict(X_test)
knn_test_pred = knn.predict(X_test)

print("R2 score random forest : ", r2_score(y_test, forest_test_pred))
print("R2 score KNN : ", r2_score(y_test, knn_test_pred))

prediksi = X_test.iloc[:5].copy()
pred_dict = {'y_true':y_test[:5]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)